【迭代器模式（Iterator Pattern）（イテレータ・パターン）】

「CN」
迭代器模式（Iterator Pattern）用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。
意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。
主要解决：不同的方式来遍历整个整合对象。
何时使用：遍历一个聚合对象。
如何解决：把在元素之间游走的责任交给迭代器，而不是聚合对象。
关键代码：定义接口：hasNext, next。
应用实例：JAVA 中的 iterator。
优点： 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。
缺点：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。
使用场景： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。
注意事项：迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。


「US」
The Iterator [1] design pattern is  to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.
What problems can the Iterator design pattern solve? [2]
The elements of an aggregate object should be accessed and traversed without exposing its representation (data structures).
New traversal operations should be defined for an aggregate object without changing its interface.
What solution does the Iterator design pattern describe?
Define a separate (iterator) object that encapsulates accessing and traversing an aggregate object.
Clients use an iterator to access and traverse an aggregate without knowing its representation (data structures).
Different iterators can be used to access and traverse an aggregate in different ways. 
New access and traversal operations can be defined independently by defining new iterators.

「JP」
iteratorは日本語にすると「反復子」などと呼ばれるものです。 Iterator パターンは、要素の集まりを保有するオブジェクトの各要素に順番にアクセスする方法を提供するためのパターンです。

たとえば、集約オブジェクトとして List クラスを想定してみましょう。 List クラスは、要素としていくつかのオブジェクトを持つことができるものとします。 このList オブジェクトが持つ要素に順番にアクセスするような場合、 どのような順番で各要素にアクセスするのかによって、さまざまな走査方法が考えられます。 例えば、各オブジェクトが持つ名前の順番にアクセスしたい場合が考えられますし、 各オブジェクトの何らかのパラメータを利用して走査したい場合もあるでしょう。 それでは、これらの「走査方法」は誰が提供すればよいでしょう？ List クラスですべての走査方法を提供することは不可能です。 なぜなら、走査方法は、その目的によって、さまざまなものが考えられ、 そのすべてをあらかじめ用意しておくことができないからです。 そこで、この走査方法を与えるクラスを List クラスとは独立させておきます。 すると、必要な走査方法を与えるクラスをユーザが自分で作成し、 これを利用できるようになり、より柔軟な設計となるわけです。