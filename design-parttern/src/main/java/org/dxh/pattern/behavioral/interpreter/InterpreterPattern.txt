【解释器模式（Interpreter Pattern）】

「CH」
解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式、实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。
意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。
主要解决：对于一些固定文法构建一个解释句子的解释器。
何时使用：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。
如何解决：构件语法树，定义终结符与非终结符。
关键代码：构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。
应用实例：编译器、运算表达式计算。
优点： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。
缺点： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。
使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。
注意事项：可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。



「US」
The Interpreter [2] design pattern is to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.
What problems can the Interpreter design pattern solve? [3]
A grammar for a simple language should be defined
so that sentences in the language can be interpreted.

「JP」
Iterator パターンは、要素の集まりを保有するオブジェクトの各要素に順番にアクセスする方法を提供するためのパターンです。
たとえば、集約オブジェクトとして List クラスを想定してみましょう。 List クラスは、要素としていくつかのオブジェクトを持つことができるものとします。 このList オブジェクトが持つ要素に順番にアクセスするような場合、 どのような順番で各要素にアクセスするのかによって、さまざまな走査方法が考えられます。 例えば、各オブジェクトが持つ名前の順番にアクセスしたい場合が考えられますし、 各オブジェクトの何らかのパラメータを利用して走査したい場合もあるでしょう。 それでは、これらの「走査方法」は誰が提供すればよいでしょう？ List クラスですべての走査方法を提供することは不可能です。 なぜなら、走査方法は、その目的によって、さまざまなものが考えられ、 そのすべてをあらかじめ用意しておくことができないからです。 そこで、この走査方法を与えるクラスを List クラスとは独立させておきます。 すると、必要な走査方法を与えるクラスをユーザが自分で作成し、 これを利用できるようになり、より柔軟な設計となるわけです。
 